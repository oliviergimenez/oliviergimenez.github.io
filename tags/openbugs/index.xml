<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>OpenBUGS | Olivier Gimenez</title><link>https://oliviergimenez.github.io/tags/openbugs/</link><atom:link href="https://oliviergimenez.github.io/tags/openbugs/index.xml" rel="self" type="application/rss+xml"/><description>OpenBUGS</description><generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Â© Olivier Gimenez 2021</copyright><lastBuildDate>Fri, 10 May 2019 00:00:00 +0000</lastBuildDate><image><url>https://oliviergimenez.github.io/img/flyfishing.jpg</url><title>OpenBUGS</title><link>https://oliviergimenez.github.io/tags/openbugs/</link></image><item><title>Tutorial on fitting a system of Ordinary Differential Equations to time-series data using OpenBUGS</title><link>https://oliviergimenez.github.io/blog/fitodedata/</link><pubDate>Fri, 10 May 2019 00:00:00 +0000</pubDate><guid>https://oliviergimenez.github.io/blog/fitodedata/</guid><description>&lt;blockquote class="twitter-tweet" data-lang="fr">&lt;p lang="en" dir="ltr">Just wrote a short &lt;a href="https://twitter.com/hashtag/tutorial?src=hash&amp;amp;ref_src=twsrc%5Etfw">#tutorial&lt;/a> on fitting a system of Ordinary Differential Equations to time-series data using &lt;a href="https://twitter.com/hashtag/OpenBUGS?src=hash&amp;amp;ref_src=twsrc%5Etfw">#OpenBUGS&lt;/a> in &lt;a href="https://twitter.com/hashtag/rstats?src=hash&amp;amp;ref_src=twsrc%5Etfw">#rstats&lt;/a> &lt;a href="https://t.co/7luj8XVgP6">https://t.co/7luj8XVgP6&lt;/a> - Data and model are from &lt;a href="https://t.co/X9CwX7dW83">https://t.co/X9CwX7dW83&lt;/a> in which &lt;a href="https://twitter.com/hashtag/zombie?src=hash&amp;amp;ref_src=twsrc%5Etfw">#zombie&lt;/a> movies are used for illustration &lt;a href="https://twitter.com/hashtag/shaunofthedead?src=hash&amp;amp;ref_src=twsrc%5Etfw">#shaunofthedead&lt;/a> &lt;a href="https://t.co/MHmiGhH7Ri">pic.twitter.com/MHmiGhH7Ri&lt;/a>&lt;/p>&amp;mdash; Olivier Gimenez ðŸ–– (@oaggimenez) &lt;a href="https://twitter.com/oaggimenez/status/1126568687396433920?ref_src=twsrc%5Etfw">9 mai 2019&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script></description></item><item><title>Running OpenBUGS in parallel</title><link>https://oliviergimenez.github.io/blog/run_openbugs_parallel/</link><pubDate>Sun, 14 Jan 2018 00:00:00 +0000</pubDate><guid>https://oliviergimenez.github.io/blog/run_openbugs_parallel/</guid><description>&lt;img style="float:left;margin-right:10px;margin-top:10px;width:200px;margin-bottom:5px" src="https://oliviergimenez.github.io/img/parcomp.jpg">
Recently, I have been using `OpenBUGS` for some analyses that `JAGS` cannot do. However, `JAGS` can be run in parallel through [the `jagsUI` package](https://github.com/kenkellner/jagsUI), which can save you some precious time. So the question is how to run several chains in parallel with `OpenBUGS`.
&lt;p>Well, first you&amp;rsquo;ll need to install &lt;code>OpenBUGS&lt;/code> (if you&amp;rsquo;re on a Mac, check out
&lt;a href="https://oliviergimenez.github.io/post/run_openbugs_on_mac/" target="_blank" rel="noopener">this short tutorial&lt;/a>). Then, you&amp;rsquo;ll need to run &lt;code>OpenBUGS&lt;/code> from &lt;code>R&lt;/code> through the pacage &lt;code>R2OpenBUGS&lt;/code>, which you can install via:&lt;/p>
&lt;pre>&lt;code class="language-r">if(!require(R2OpenBUGS)) install.packages(&amp;quot;R2OpenBUGS&amp;quot;)
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## Loading required package: R2OpenBUGS
&lt;/code>&lt;/pre>
&lt;h2 id="standard-analysis">Standard analysis&lt;/h2>
&lt;p>Now let&amp;rsquo;s run the classical &lt;code>BUGS&lt;/code> &lt;code>school&lt;/code> example:&lt;/p>
&lt;p>Load the &lt;code>OpenBUGS&lt;/code> Package&lt;/p>
&lt;pre>&lt;code class="language-r">library(R2OpenBUGS)
&lt;/code>&lt;/pre>
&lt;p>Load the data&lt;/p>
&lt;pre>&lt;code class="language-r">data(schools)
&lt;/code>&lt;/pre>
&lt;p>Define the model, write it to a text file and have a look&lt;/p>
&lt;pre>&lt;code class="language-r">nummodel &amp;lt;- function(){
for (j in 1:J){
y[j] ~ dnorm (theta[j], tau.y[j])
theta[j] ~ dnorm (mu.theta, tau.theta)
tau.y[j] &amp;lt;- pow(sigma.y[j], -2)}
mu.theta ~ dnorm (0.0, 1.0E-6)
tau.theta &amp;lt;- pow(sigma.theta, -2)
sigma.theta ~ dunif (0, 1000)
}
write.model(nummodel, &amp;quot;nummodel.txt&amp;quot;)
model.file1 = paste(getwd(),&amp;quot;nummodel.txt&amp;quot;, sep=&amp;quot;/&amp;quot;)
file.show(&amp;quot;nummodel.txt&amp;quot;)
&lt;/code>&lt;/pre>
&lt;p>Prepare the data for input into OpenBUGS&lt;/p>
&lt;pre>&lt;code class="language-r">J &amp;lt;- nrow(schools)
y &amp;lt;- schools$estimate
sigma.y &amp;lt;- schools$sd
data &amp;lt;- list (&amp;quot;J&amp;quot;, &amp;quot;y&amp;quot;, &amp;quot;sigma.y&amp;quot;)
&lt;/code>&lt;/pre>
&lt;p>Initialization of variables&lt;/p>
&lt;pre>&lt;code class="language-r">inits &amp;lt;- function(){
list(theta = rnorm(J, 0, 100), mu.theta = rnorm(1, 0, 100), sigma.theta = runif(1, 0, 100))}
&lt;/code>&lt;/pre>
&lt;p>Set the &lt;code>Wine&lt;/code> working directory and the directory to &lt;code>OpenBUGS&lt;/code>, and change the OpenBUGS.exe location as necessary:&lt;/p>
&lt;pre>&lt;code class="language-r">WINE=&amp;quot;/usr/local/Cellar/wine/2.0.4/bin/wine&amp;quot;
WINEPATH=&amp;quot;/usr/local/Cellar/wine/2.0.4/bin/winepath&amp;quot;
OpenBUGS.pgm=&amp;quot;/Applications/OpenBUGS323/OpenBUGS.exe&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>The are the parameters to save&lt;/p>
&lt;pre>&lt;code class="language-r">parameters = c(&amp;quot;theta&amp;quot;, &amp;quot;mu.theta&amp;quot;, &amp;quot;sigma.theta&amp;quot;)
&lt;/code>&lt;/pre>
&lt;p>Run the model&lt;/p>
&lt;pre>&lt;code class="language-r">ptm &amp;lt;- proc.time()
schools.sim &amp;lt;- bugs(data, inits, model.file = model.file1,parameters=parameters,n.chains = 2, n.iter = 500000, n.burnin = 10000, OpenBUGS.pgm=OpenBUGS.pgm, WINE=WINE, WINEPATH=WINEPATH,useWINE=T)
elapsed_time &amp;lt;- proc.time() - ptm
elapsed_time
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## user system elapsed
## 50.835 2.053 55.010
&lt;/code>&lt;/pre>
&lt;pre>&lt;code class="language-r">print(schools.sim)
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## Inference for Bugs model at &amp;quot;/Users/oliviergimenez/Desktop/nummodel.txt&amp;quot;,
## Current: 2 chains, each with 5e+05 iterations (first 10000 discarded)
## Cumulative: n.sims = 980000 iterations saved
## mean sd 2.5% 25% 50% 75% 97.5% Rhat n.eff
## theta[1] 11.6 8.4 -1.9 6.1 10.5 15.8 32.0 1 370000
## theta[2] 8.0 6.4 -4.8 4.0 8.0 12.0 20.9 1 67000
## theta[3] 6.4 7.8 -11.3 2.2 6.8 11.2 20.9 1 55000
## theta[4] 7.7 6.6 -5.7 3.7 7.8 11.8 20.9 1 70000
## theta[5] 5.5 6.5 -8.8 1.6 5.9 9.8 17.1 1 26000
## theta[6] 6.2 6.9 -8.9 2.3 6.6 10.7 18.9 1 23000
## theta[7] 10.7 6.9 -1.4 6.0 10.1 14.7 26.2 1 480000
## theta[8] 8.7 7.9 -6.8 4.0 8.4 13.0 25.7 1 76000
## mu.theta 8.1 5.3 -2.0 4.7 8.1 11.4 18.5 1 30000
## sigma.theta 6.6 5.7 0.2 2.5 5.2 9.1 20.9 1 12000
## deviance 60.5 2.2 57.0 59.1 60.1 61.4 66.0 1 980000
##
## For each parameter, n.eff is a crude measure of effective sample size,
## and Rhat is the potential scale reduction factor (at convergence, Rhat=1).
##
## DIC info (using the rule, pD = Dbar-Dhat)
## pD = 2.8 and DIC = 63.2
## DIC is an estimate of expected predictive error (lower deviance is better).
&lt;/code>&lt;/pre>
&lt;h2 id="parallel-computations">Parallel computations&lt;/h2>
&lt;p>To run several chains in parallel, we&amp;rsquo;ll follow the steps described in
&lt;a href="http://www.petrkeil.com/?p=63" target="_blank" rel="noopener">this nice post&lt;/a>.&lt;/p>
&lt;pre>&lt;code class="language-r"># loading packages
library(snow)
library(snowfall)
# setting the number of CPUs to be 2
sfInit(parallel=TRUE, cpus=2)
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## Warning in searchCommandline(parallel, cpus = cpus, type
## = type, socketHosts = socketHosts, : Unknown option on
## commandline: rmarkdown::render('/Users/oliviergimenez/Desktop/
## run_openbugs_in_parallel.Rmd',~+~~+~encoding~+~
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## R Version: R version 3.4.3 (2017-11-30)
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## snowfall 1.84-6.1 initialized (using snow 0.4-2): parallel execution on 2 CPUs.
&lt;/code>&lt;/pre>
&lt;pre>&lt;code class="language-r"># and assigning the R2OpenBUGS library to each CPU
sfLibrary(R2OpenBUGS)
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## Library R2OpenBUGS loaded.
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## Library R2OpenBUGS loaded in cluster.
&lt;/code>&lt;/pre>
&lt;pre>&lt;code class="language-r"># create list of data
J &amp;lt;- nrow(schools)
y &amp;lt;- schools$estimate
sigma.y &amp;lt;- schools$sd
x.data &amp;lt;- list (J=J, y=y, sigma.y=sigma.y)
# creating separate directory for each CPU process
folder1 &amp;lt;- paste(getwd(), &amp;quot;/chain1&amp;quot;, sep=&amp;quot;&amp;quot;)
folder2 &amp;lt;- paste(getwd(), &amp;quot;/chain2&amp;quot;, sep=&amp;quot;&amp;quot;)
dir.create(folder1); dir.create(folder2);
# sinking the model into a file in each directory
for (folder in c(folder1, folder2))
{
sink(paste(folder, &amp;quot;/nummodel.txt&amp;quot;, sep=&amp;quot;&amp;quot;))
cat(&amp;quot;
model{
for (j in 1:J){
y[j] ~ dnorm (theta[j], tau.y[j])
theta[j] ~ dnorm (mu.theta, tau.theta)
tau.y[j] &amp;lt;- pow(sigma.y[j], -2)}
mu.theta ~ dnorm (0.0, 1.0E-6)
tau.theta &amp;lt;- pow(sigma.theta, -2)
sigma.theta ~ dunif (0, 1000)
}
&amp;quot;)
sink()
}
# defining the function that will run MCMC on each CPU
# Arguments:
# chain - will be 1 or 2
# x.data - the data list
# params - parameters to be monitored
parallel.bugs &amp;lt;- function(chain, x.data, params)
{
# a. defining directory for each CPU
sub.folder &amp;lt;- paste(getwd(),&amp;quot;/chain&amp;quot;, chain, sep=&amp;quot;&amp;quot;)
# b. specifying the initial MCMC values
inits &amp;lt;- function()list(theta = rnorm(x.data$J, 0, 100), mu.theta = rnorm(1, 0, 100), sigma.theta = runif(1, 0, 100))
# c. calling OpenBugs
# (you may need to change the OpenBUGS.pgm directory)
# je suis sous Mac, je fais tourner OpenBUGS via Wine
bugs(data=x.data, inits=inits, parameters.to.save=params,
n.iter = 500000, n.burnin = 10000, n.chains=1,
model.file=&amp;quot;nummodel.txt&amp;quot;, debug=FALSE, codaPkg=TRUE,
useWINE=TRUE, OpenBUGS.pgm = &amp;quot;/Applications/OpenBUGS323/OpenBUGS.exe&amp;quot;,
working.directory = sub.folder,
WINE=&amp;quot;/usr/local/Cellar/wine/2.0.4/bin/wine&amp;quot;,
WINEPATH=&amp;quot;/usr/local/Cellar/wine/2.0.4/bin/winepath&amp;quot;)
}
# setting the parameters to be monitored
params &amp;lt;- c(&amp;quot;theta&amp;quot;, &amp;quot;mu.theta&amp;quot;, &amp;quot;sigma.theta&amp;quot;)
# calling the sfLapply function that will run
# parallel.bugs on each of the 2 CPUs
ptm &amp;lt;- proc.time()
sfLapply(1:2, fun=parallel.bugs, x.data=x.data, params=params)
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## [[1]]
## [1] &amp;quot;/Users/oliviergimenez/Desktop/chain1/CODAchain1.txt&amp;quot;
##
## [[2]]
## [1] &amp;quot;/Users/oliviergimenez/Desktop/chain2/CODAchain1.txt&amp;quot;
&lt;/code>&lt;/pre>
&lt;pre>&lt;code class="language-r">elapsed_time = proc.time() - ptm
elapsed_time
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## user system elapsed
## 0.013 0.000 32.157
&lt;/code>&lt;/pre>
&lt;pre>&lt;code class="language-r"># locating position of each CODA chain
chain1 &amp;lt;- paste(folder1, &amp;quot;/CODAchain1.txt&amp;quot;, sep=&amp;quot;&amp;quot;)
chain2 &amp;lt;- paste(folder2, &amp;quot;/CODAchain1.txt&amp;quot;, sep=&amp;quot;&amp;quot;)
# and, finally, getting the results
res &amp;lt;- read.bugs(c(chain1, chain2))
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## Abstracting deviance ... 490000 valid values
## Abstracting mu.theta ... 490000 valid values
## Abstracting sigma.theta ... 490000 valid values
## Abstracting theta[1] ... 490000 valid values
## Abstracting theta[2] ... 490000 valid values
## Abstracting theta[3] ... 490000 valid values
## Abstracting theta[4] ... 490000 valid values
## Abstracting theta[5] ... 490000 valid values
## Abstracting theta[6] ... 490000 valid values
## Abstracting theta[7] ... 490000 valid values
## Abstracting theta[8] ... 490000 valid values
## Abstracting deviance ... 490000 valid values
## Abstracting mu.theta ... 490000 valid values
## Abstracting sigma.theta ... 490000 valid values
## Abstracting theta[1] ... 490000 valid values
## Abstracting theta[2] ... 490000 valid values
## Abstracting theta[3] ... 490000 valid values
## Abstracting theta[4] ... 490000 valid values
## Abstracting theta[5] ... 490000 valid values
## Abstracting theta[6] ... 490000 valid values
## Abstracting theta[7] ... 490000 valid values
## Abstracting theta[8] ... 490000 valid values
&lt;/code>&lt;/pre>
&lt;pre>&lt;code class="language-r">summary(res)
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>##
## Iterations = 10001:5e+05
## Thinning interval = 1
## Number of chains = 2
## Sample size per chain = 490000
##
## 1. Empirical mean and standard deviation for each variable,
## plus standard error of the mean:
##
## Mean SD Naive SE Time-series SE
## deviance 60.453 2.221 0.002243 0.005737
## mu.theta 8.109 5.261 0.005315 0.020596
## sigma.theta 6.610 5.682 0.005740 0.027336
## theta[1] 11.697 8.407 0.008493 0.027974
## theta[2] 8.023 6.395 0.006460 0.019264
## theta[3] 6.365 7.866 0.007946 0.022485
## theta[4] 7.735 6.601 0.006668 0.019766
## theta[5] 5.467 6.504 0.006570 0.022580
## theta[6] 6.234 6.885 0.006955 0.021332
## theta[7] 10.727 6.891 0.006961 0.023304
## theta[8] 8.648 7.892 0.007972 0.021541
##
## 2. Quantiles for each variable:
##
## 2.5% 25% 50% 75% 97.5%
## deviance 57.0200 59.120 60.040 61.430 65.99
## mu.theta -2.0600 4.784 8.066 11.410 18.50
## sigma.theta 0.2275 2.456 5.275 9.190 20.82
## theta[1] -1.8850 6.195 10.560 15.880 32.04
## theta[2] -4.8350 4.049 8.004 11.980 20.96
## theta[3] -11.4800 2.194 6.871 11.170 20.90
## theta[4] -5.7500 3.711 7.784 11.820 20.92
## theta[5] -8.8490 1.603 5.938 9.834 17.14
## theta[6] -8.8940 2.255 6.632 10.680 18.95
## theta[7] -1.3450 6.125 10.140 14.680 26.27
## theta[8] -6.8910 4.037 8.409 12.960 25.72
&lt;/code>&lt;/pre></description></item><item><title>Run OpenBUGS on a Mac</title><link>https://oliviergimenez.github.io/blog/run_openbugs_on_mac/</link><pubDate>Sat, 13 Jan 2018 00:00:00 +0000</pubDate><guid>https://oliviergimenez.github.io/blog/run_openbugs_on_mac/</guid><description>&lt;img style="float:left;margin-right:10px;margin-top:10px;width:200px;margin-bottom:5px" src="https://oliviergimenez.github.io/img/bugs.jpg">
I had to use the good old `OpenBUGS` for some analyses that cannot be done in `JAGS`. Below are the steps to install `OpenBUGS` then to run it from your Mac either natively or from `R`. This tutorial is an adaptation of [this post](https://sites.google.com/site/mmeclimate/-bayesmet/openbugs-on-mac-os-x) and [that one](http://www.davideagle.org/r-2/bayesian-modeling-using-winbugs-and-openbugs/running-openbugs-on-mac-using-wine).
&lt;ol>
&lt;li>
&lt;p>If not done already, install
&lt;a href="https://brew.sh/" target="_blank" rel="noopener">Homebrew&lt;/a>. This program will make the installation of any other programs on your Mac so easy!&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Install
&lt;a href="https://www.winehq.org/" target="_blank" rel="noopener">Wine&lt;/a> which will allow you to run any Windows programs (.exe) on your Mac. To do so, start by
&lt;a href="http://blog.teamtreehouse.com/introduction-to-the-mac-os-x-command-line" target="_blank" rel="noopener">opening Terminal&lt;/a>, then type in the command: &lt;em>brew install wine&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Next, download the Windows version of &lt;code>OpenBUGS&lt;/code>
&lt;a href="https://www.mrc-bsu.cam.ac.uk/training/short-courses/bayescourse/download/" target="_blank" rel="noopener">here&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>To install &lt;code>OpenBUGS&lt;/code>, still in Terminal, go to the directory where the file was downloaded and type (you might need to unzip the file you downloaded first): &lt;em>wine OpenBUGS323setup.exe&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>OpenBUGS&lt;/code> is now installed and ready to be used! You can run it by first going to the directory where &lt;code>OpenBUGS&lt;/code> was installed. On my laptop, it can be achieved via the command: &lt;em>cd /Applications/OpenBUGS323&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Then, you just need to tye in the following command in the Terminal, and you should see an OpenBUGS windows poping up: &lt;em>wine OpenBUGS&lt;/em>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>Now we would like to run &lt;code>OpenBUGS&lt;/code> from &lt;code>R&lt;/code>.&lt;/p>
&lt;ol start="7">
&lt;li>Install the package &lt;code>R2OpenBUGS&lt;/code> by typing in the &lt;code>R&lt;/code> console:&lt;/li>
&lt;/ol>
&lt;pre>&lt;code class="language-r">if(!require(R2OpenBUGS)) install.packages(&amp;quot;R2OpenBUGS&amp;quot;)
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## Loading required package: R2OpenBUGS
&lt;/code>&lt;/pre>
&lt;ol start="8">
&lt;li>Now let&amp;rsquo;s see whether everything works well by running the classical &lt;code>BUGS&lt;/code> &lt;code>school&lt;/code> example:&lt;/li>
&lt;/ol>
&lt;p>Load the &lt;code>OpenBUGS&lt;/code> Package&lt;/p>
&lt;pre>&lt;code class="language-r">library(R2OpenBUGS)
&lt;/code>&lt;/pre>
&lt;p>Load the data&lt;/p>
&lt;pre>&lt;code class="language-r">data(schools)
&lt;/code>&lt;/pre>
&lt;p>Define the model, write it to a text file and have a look&lt;/p>
&lt;pre>&lt;code class="language-r">nummodel &amp;lt;- function(){
for (j in 1:J){
y[j] ~ dnorm (theta[j], tau.y[j])
theta[j] ~ dnorm (mu.theta, tau.theta)
tau.y[j] &amp;lt;- pow(sigma.y[j], -2)}
mu.theta ~ dnorm (0.0, 1.0E-6)
tau.theta &amp;lt;- pow(sigma.theta, -2)
sigma.theta ~ dunif (0, 1000)
}
write.model(nummodel, &amp;quot;nummodel.txt&amp;quot;)
model.file1 = paste(getwd(),&amp;quot;nummodel.txt&amp;quot;, sep=&amp;quot;/&amp;quot;)
file.show(&amp;quot;nummodel.txt&amp;quot;)
&lt;/code>&lt;/pre>
&lt;p>Prepare the data for input into OpenBUGS&lt;/p>
&lt;pre>&lt;code class="language-r">J &amp;lt;- nrow(schools)
y &amp;lt;- schools$estimate
sigma.y &amp;lt;- schools$sd
data &amp;lt;- list (&amp;quot;J&amp;quot;, &amp;quot;y&amp;quot;, &amp;quot;sigma.y&amp;quot;)
&lt;/code>&lt;/pre>
&lt;p>Initialization of variables&lt;/p>
&lt;pre>&lt;code class="language-r">inits &amp;lt;- function(){
list(theta = rnorm(J, 0, 100), mu.theta = rnorm(1, 0, 100), sigma.theta = runif(1, 0, 100))}
&lt;/code>&lt;/pre>
&lt;p>Set the &lt;code>Wine&lt;/code> working directory and the directory to &lt;code>OpenBUGS&lt;/code>, and change the OpenBUGS.exe location as necessary:&lt;/p>
&lt;pre>&lt;code class="language-r">WINE=&amp;quot;/usr/local/Cellar/wine/2.0.4/bin/wine&amp;quot;
WINEPATH=&amp;quot;/usr/local/Cellar/wine/2.0.4/bin/winepath&amp;quot;
OpenBUGS.pgm=&amp;quot;/Applications/OpenBUGS323/OpenBUGS.exe&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>The are the parameters to save&lt;/p>
&lt;pre>&lt;code class="language-r">parameters = c(&amp;quot;theta&amp;quot;, &amp;quot;mu.theta&amp;quot;, &amp;quot;sigma.theta&amp;quot;)
&lt;/code>&lt;/pre>
&lt;p>Run the model&lt;/p>
&lt;pre>&lt;code class="language-r">schools.sim &amp;lt;- bugs(data, inits, model.file = model.file1,parameters=parameters,n.chains = 3, n.iter = 1000, OpenBUGS.pgm=OpenBUGS.pgm, WINE=WINE, WINEPATH=WINEPATH,useWINE=T)
&lt;/code>&lt;/pre>
&lt;p>&lt;code>R&lt;/code> will pause. You might get a weird message starting by err:ole, just ignore it. When the run is complete, a prompt will reappear, then just type the following command to get the result:&lt;/p>
&lt;pre>&lt;code class="language-r">print(schools.sim)
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## Inference for Bugs model at &amp;quot;/Users/oliviergimenez/Desktop/nummodel.txt&amp;quot;,
## Current: 3 chains, each with 1000 iterations (first 500 discarded)
## Cumulative: n.sims = 1500 iterations saved
## mean sd 2.5% 25% 50% 75% 97.5% Rhat n.eff
## theta[1] 12.2 7.9 -1.3 7.5 11.2 16.4 32.1 1.0 62
## theta[2] 9.1 6.5 -4.0 5.1 9.4 13.2 21.4 1.0 150
## theta[3] 7.8 7.7 -9.4 3.6 8.5 12.6 21.1 1.0 360
## theta[4] 8.8 6.6 -4.5 4.5 9.2 13.3 20.4 1.0 110
## theta[5] 6.8 6.9 -8.2 2.3 7.5 11.4 17.7 1.0 410
## theta[6] 7.3 7.2 -8.6 2.7 8.2 11.8 18.9 1.0 190
## theta[7] 11.5 6.4 -0.3 7.5 11.2 15.7 25.0 1.1 42
## theta[8] 9.7 7.6 -4.7 5.1 9.6 14.4 25.1 1.0 130
## mu.theta 9.2 5.2 -1.2 5.8 9.3 12.5 18.2 1.0 88
## sigma.theta 5.9 5.6 0.2 1.7 4.4 8.5 20.2 1.1 51
## deviance 60.7 2.2 57.2 59.2 60.1 61.9 65.6 1.0 120
##
## For each parameter, n.eff is a crude measure of effective sample size,
## and Rhat is the potential scale reduction factor (at convergence, Rhat=1).
##
## DIC info (using the rule, pD = Dbar-Dhat)
## pD = 2.8 and DIC = 63.4
## DIC is an estimate of expected predictive error (lower deviance is better).
&lt;/code>&lt;/pre>
&lt;p>When run natively, &lt;code>WinBUGS&lt;/code> and &lt;code>OpenBUGS&lt;/code> have nice debugging capabilities; also, you can see what is going on, I mean the program reading the data, generating inits, and so on. To get the &lt;code>OpenBUGS&lt;/code> window with a bunch of useful info, just add &lt;code>debug=T&lt;/code> to the call of the &lt;code>bugs&lt;/code> function, and re-run the model&lt;/p>
&lt;pre>&lt;code class="language-r">schools.sim &amp;lt;- bugs(data, inits, model.file = model.file1,parameters=parameters,n.chains = 3, n.iter = 1000, OpenBUGS.pgm=OpenBUGS.pgm, WINE=WINE, WINEPATH=WINEPATH,useWINE=T,debug=T)
&lt;/code>&lt;/pre>
&lt;pre>&lt;code>## arguments 'show.output.on.console', 'minimized' and 'invisible' are for Windows only
&lt;/code>&lt;/pre>
&lt;p>You will have to close the &lt;code>OpenBUGS&lt;/code> window to get the prompt back.&lt;/p></description></item></channel></rss>